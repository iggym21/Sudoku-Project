class Board:
    def __init__(self, width, height, screen, difficulty):
        self.width = width
        self.height = height
        self.screen = screen
        self.difficulty = difficulty
        self.sudoku_generator = SudokuGenerator(9, difficulty)
        self.sudoku_generator.fill_values()
        self.sudoku_generator.remove_cells()
        self.board = self.sudoku_generator.get_board()
        self.cells = [[Cell(self.board[row][col], row, col, screen) for col in range(9)] for row in range(9)]
        self.selected_cell = None

    def draw(self):
        # Draw grid lines
        for i in range(10):
            width = 4 if i % 3 == 0 else 1
            pygame.draw.line(self.screen, (0, 0, 0), (0, i * 60), (540, i * 60), width)
            pygame.draw.line(self.screen, (0, 0, 0), (i * 60, 0), (i * 60, 540), width)

        # Draw cells
        for row in self.cells:
            for cell in row:
                cell.draw()

    def select(self, row, col):
        # Deselect all cells
        for r in self.cells:
            for cell in r:
                cell.selected = False
        # Select the new cell
        self.cells[row][col].selected = True
        self.selected_cell = (row, col)

    def click(self, x, y):
        if 0 <= x <= 540 and 0 <= y <= 540:
            row, col = y // 60, x // 60
            return row, col
        return None

    def clear(self):
        if self.selected_cell:
            row, col = self.selected_cell
            if self.cells[row][col].value == 0:
                self.cells[row][col].set_sketched_value(0)

    def sketch(self, value):
        if self.selected_cell:
            row, col = self.selected_cell
            self.cells[row][col].set_sketched_value(value)

    def place_number(self, value):
        if self.selected_cell:
            row, col = self.selected_cell
            if self.cells[row][col].value == 0:
                self.cells[row][col].set_cell_value(value)

    def reset_to_original(self):
        for row in range(9):
            for col in range(9):
                self.cells[row][col].set_cell_value(self.board[row][col])
                self.cells[row][col].set_sketched_value(0)

    def is_full(self):
        return all(cell.value != 0 for row in self.cells for cell in row)

    def update_board(self):
        for row in range(9):
            for col in range(9):
                self.board[row][col] = self.cells[row][col].value

    def find_empty(self):
        for row in range(9):
            for col in range(9):
                if self.cells[row][col].value == 0:
                    return row, col
        return None

    def check_board(self):
        for row in range(9):
            for col in range(9):
                num = self.board[row][col]
                self.board[row][col] = 0
                if not self.sudoku_generator.is_valid(row, col, num):
                    return False
                self.board[row][col] = num
        return True
